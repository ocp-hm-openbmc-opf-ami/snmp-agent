/*
 * Note: this file originally auto-generated by mib2c
 * using mib2c.scalar.conf
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "netSnmpExamples.hpp"

#include <phosphor-logging/elog-errors.hpp>
#include <phosphor-logging/elog.hpp>
#include <phosphor-logging/lg2.hpp>


#include <sdbusplus/message/types.hpp>
#include <xyz/openbmc_project/Common/error.hpp>
#include <xyz/openbmc_project/Sensor/Value/server.hpp>


/** Initializes the netSnmpExampleScalars module */
void
init_netSnmpExampleScalars(void)
{
    const oid amiSnmpInteger_oid[] = { 1,3,6,1,4,1,8072,2,1,1 };
    const oid amiSnmpSleeper_oid[] = { 1,3,6,1,4,1,8072,2,1,2 };
    const oid amiSnmpString_oid[] = { 1,3,6,1,4,1,8072,2,1,3 };
    const oid amiSnmpFloat_oid[] = { 1,3,6,1,4,1,8072,2,1,4 };
    const oid amiSnmpInlet_BRD_Temp_oid[] = { 1,3,6,1,4,1,8072,2,1,5 };

  DEBUGMSGTL(("netSnmpExampleScalars", "Initializing\n"));

    netsnmp_register_scalar(
        netsnmp_create_handler_registration("amiSnmpInteger", handle_amiSnmpInteger,
                               amiSnmpInteger_oid, OID_LENGTH(amiSnmpInteger_oid),
                               HANDLER_CAN_RWRITE
        ));
    netsnmp_register_scalar(
        netsnmp_create_handler_registration("amiSnmpSleeper", handle_amiSnmpSleeper,
                               amiSnmpSleeper_oid, OID_LENGTH(amiSnmpSleeper_oid),
                               HANDLER_CAN_RWRITE
        ));
    netsnmp_register_scalar(
        netsnmp_create_handler_registration("amiSnmpString", handle_amiSnmpString,
                               amiSnmpString_oid, OID_LENGTH(amiSnmpString_oid),
                               HANDLER_CAN_RWRITE
        ));

    netsnmp_register_scalar(
        netsnmp_create_handler_registration("amiSnmpFloat", handle_amiSnmpFloat,
                               amiSnmpFloat_oid, OID_LENGTH(amiSnmpFloat_oid),
                               HANDLER_CAN_RWRITE
        ));
    netsnmp_register_scalar(
        netsnmp_create_handler_registration("amiSnmpInlet_BRD_Temp", handle_amiSnmpInlet_BRD_Temp,
                               amiSnmpInlet_BRD_Temp_oid, OID_LENGTH(amiSnmpInlet_BRD_Temp_oid),
                               HANDLER_CAN_RWRITE
        ));
    
}

int
handle_amiSnmpInteger(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    int ret;
    int amiInt=0;
    std::ofstream fpchassis;
    ObjUsr objects;
    
    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "handle SNMP Integer "  << std::endl;
    fpchassis.close();

    if(0)
      {
	reginfo = reginfo;
	handler = handler;
      }


    std::string basePath = "/xyz/openbmc_project/sensors/temperature/BMC_Temp";
    std::string interface = "xyz.openbmc_project.Sensor.Value";

    objects = getMapperObject(basePath,interface);
	
    
    //get the sensor Information
    try
      {
	for (const auto& [path, interfaces] : objects)
	  {
	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "find interfaces" << std::endl;
	    fpchassis.close();
	    auto it = interfaces.find("xyz.openbmc_project.Sensor.Value");
	    if (it != interfaces.end())
	      {
		auto propIt = it->second.find("Value");
		if (propIt != it->second.end() &&
		    std::get<double>(propIt->second))
		  {
		    amiInt = trunc(std::get<double>(propIt->second));
		    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
		    fpchassis << "path " << path.str << std::endl;
		    fpchassis << "propIt second  " << std::get<double>(propIt->second) << std::endl;
		    fpchassis.close();
		    break;
		  }
	      }
	  }	
	
      }
    catch (const std::bad_variant_access& e)
      {
	fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	fpchassis << "failure" << std::endl;
	fpchassis.close();
      }
        
    /* We are never called for a GETNEXT if it's registered as a
       "instance", as it's "magically" handled for us.  */

    /* a instance handler also only hands us one request at a time, so
       we don't need to loop over a list of requests; we'll only get one. */
    
    switch(reqinfo->mode) {

        case MODE_GET:
            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                     /* XXX: a pointer to the scalar's data */&amiInt,
                                     /* XXX: the length of the data in bytes */sizeof(amiInt));
	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer MODE GET " << std::endl;
	    fpchassis.close();
            break;

        /*
         * SET REQUEST
         *
         * multiple states in the transaction.  See:
         * http://www.net-snmp.org/tutorial-5/toolkit/mib_module/set-actions.jpg
         */
        case MODE_SET_RESERVE1:
                /* or you could use netsnmp_check_vb_type_and_size instead */
            ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
	    
	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer MODE SET RESERVE1 " << std::endl;
	    fpchassis.close();
	    
            if ( ret != SNMP_ERR_NOERROR ) {
                netsnmp_set_request_error(reqinfo, requests, ret );
            }
            break;

        case MODE_SET_RESERVE2:
            /* XXX malloc "undo" storage buffer */

	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer MODE SET RESERVE2 " << std::endl;
	    fpchassis.close();
	  
            if (/* XXX if malloc, or whatever, failed: */0) {
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_RESOURCEUNAVAILABLE);
            }
            break;

        case MODE_SET_FREE:
            /* XXX: free resources allocated in RESERVE1 and/or
               RESERVE2.  Something failed somewhere, and the states
               below won't be called. */
	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer MODE SET FREE " << std::endl;
	    fpchassis.close();
            break;

        case MODE_SET_ACTION:
            /* XXX: perform the value change here */
	    //amiSnmpInteger(amiInt);
	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer MODE SET ACTION " << std::endl;
	    fpchassis.close();
	    
            break;

        case MODE_SET_COMMIT:
            /* XXX: delete temporary storage */
	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer MODE SET COMMIT" << std::endl;
	    fpchassis.close();
            break;

        case MODE_SET_UNDO:
            /* XXX: UNDO and return to previous value for the object */
	  	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer MODE SET UNDO " << std::endl;
	    fpchassis.close();
            break;

        default:
            /* we should never get here, so this is a really bad error */
	    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	    fpchassis << "Handle ami snmp integer DEFAULT " << std::endl;
	    fpchassis.close();
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_amiSnmpInteger\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "Handle ami snmp integer Return " << std::endl;
    fpchassis.close();
    
    return SNMP_ERR_NOERROR;
}

int
handle_amiSnmpSleeper(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    int ret;

    int amiSleeper = 0;

    
    std::string basePath = "/xyz/openbmc_project/sensors/temperature/BMC_Temp";
    std::string interface = "xyz.openbmc_project.Sensor.Value";
    
    double amiSleeperDble = getSensorInfo(basePath,interface);

    if(0)
      {
	reginfo = reginfo;
	handler = handler;
      }
    amiSleeper = trunc(amiSleeperDble);
    
    /* We are never called for a GETNEXT if it's registered as a
       "instance", as it's "magically" handled for us.  */

    /* a instance handler also only hands us one request at a time, so
       we don't need to loop over a list of requests; we'll only get one. */
    
    switch(reqinfo->mode) {

        case MODE_GET:
            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
                                     /* XXX: a pointer to the scalar's data */&amiSleeper,
                                     /* XXX: the length of the data in bytes */sizeof(amiSleeper));
            break;

        /*
         * SET REQUEST
         *
         * multiple states in the transaction.  See:
         * http://www.net-snmp.org/tutorial-5/toolkit/mib_module/set-actions.jpg
         */
        case MODE_SET_RESERVE1:
                /* or you could use netsnmp_check_vb_type_and_size instead */
            ret = netsnmp_check_vb_type(requests->requestvb, ASN_INTEGER);
            if ( ret != SNMP_ERR_NOERROR ) {
                netsnmp_set_request_error(reqinfo, requests, ret );
            }
            break;

        case MODE_SET_RESERVE2:
            /* XXX malloc "undo" storage buffer */
            break;

        case MODE_SET_FREE:
            /* XXX: free resources allocated in RESERVE1 and/or
               RESERVE2.  Something failed somewhere, and the states
               below won't be called. */
            break;

        case MODE_SET_ACTION:
            /* XXX: perform the value change here */
            break;

        case MODE_SET_COMMIT:
            /* XXX: delete temporary storage */
            break;

        case MODE_SET_UNDO:
            /* XXX: UNDO and return to previous value for the object */
            break;

        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_amiSnmpSleeper\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}
int
handle_amiSnmpString(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    int ret;

    std::string amiString;

    if(0)
      {
	reginfo = reginfo;
	handler = handler;
      }

    /* We are never called for a GETNEXT if it's registered as a
       "instance", as it's "magically" handled for us.  */

    /* a instance handler also only hands us one request at a time, so
       we don't need to loop over a list of requests; we'll only get one. */
    
    switch(reqinfo->mode) {

        case MODE_GET:
            snmp_set_var_typed_value(requests->requestvb, ASN_OCTET_STR,
                                     /* XXX: a pointer to the scalar's data */&amiString,
                                     /* XXX: the length of the data in bytes */amiString.size());
            break;

        /*
         * SET REQUEST
         *
         * multiple states in the transaction.  See:
         * http://www.net-snmp.org/tutorial-5/toolkit/mib_module/set-actions.jpg
         */
        case MODE_SET_RESERVE1:
                /* or you could use netsnmp_check_vb_type_and_size instead */
            ret = netsnmp_check_vb_type(requests->requestvb, ASN_OCTET_STR);
            if ( ret != SNMP_ERR_NOERROR ) {
                netsnmp_set_request_error(reqinfo, requests, ret );
            }
            break;

        case MODE_SET_RESERVE2:
            /* XXX malloc "undo" storage buffer */
            break;

        case MODE_SET_FREE:
            /* XXX: free resources allocated in RESERVE1 and/or
               RESERVE2.  Something failed somewhere, and the states
               below won't be called. */
            break;

        case MODE_SET_ACTION:
            /* XXX: perform the value change here */
            break;

        case MODE_SET_COMMIT:
            /* XXX: delete temporary storage */
            break;

        case MODE_SET_UNDO:
            /* XXX: UNDO and return to previous value for the object */
            break;

        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_amiSnmpString\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_amiSnmpFloat(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    int ret;

    std::string basePath = "/xyz/openbmc_project/sensors/temperature/BMC_Temp";
    std::string interface = "xyz.openbmc_project.Sensor.Value";
    
    float amiFloat = static_cast<float> (getSensorInfo(basePath,interface));

    if(0)
      {
	reginfo = reginfo;
	handler = handler;
      }

    switch(reqinfo->mode) {

        case MODE_GET:
            snmp_set_var_typed_value(requests->requestvb, ASN_OPAQUE_FLOAT,
                                     /* XXX: a pointer to the scalar's data */&amiFloat,
                                     /* XXX: the length of the data in bytes */sizeof(amiFloat));
            break;

        /*
         * SET REQUEST
         *
         * multiple states in the transaction.  See:
         * http://www.net-snmp.org/tutorial-5/toolkit/mib_module/set-actions.jpg
         */
        case MODE_SET_RESERVE1:
                /* or you could use netsnmp_check_vb_type_and_size instead */
	    ret = netsnmp_check_vb_type(requests->requestvb, ASN_OPAQUE_FLOAT);
            if ( ret != SNMP_ERR_NOERROR )
	      {
                netsnmp_set_request_error(reqinfo, requests, ret );
	      }
            break;

        case MODE_SET_RESERVE2:
            /* XXX malloc "undo" storage buffer */
            break;

        case MODE_SET_FREE:
            /* XXX: free resources allocated in RESERVE1 and/or
               RESERVE2.  Something failed somewhere, and the states
               below won't be called. */
            break;

        case MODE_SET_ACTION:
            /* XXX: perform the value change here */
            break;

        case MODE_SET_COMMIT:
            /* XXX: delete temporary storage */
            break;

        case MODE_SET_UNDO:
            /* XXX: UNDO and return to previous value for the object */
            break;

        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_amiSnmpFloat\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

int
handle_amiSnmpInlet_BRD_Temp(netsnmp_mib_handler *handler,
                          netsnmp_handler_registration *reginfo,
                          netsnmp_agent_request_info   *reqinfo,
                          netsnmp_request_info         *requests)
{
    int ret;

    std::string basePath = "/xyz/openbmc_project/sensors/temperature/Inlet_BRD_Temp";
    std::string interface = "xyz.openbmc_project.Sensor.Value";
    
    float amiFloat = static_cast<float> (getSensorInfo(basePath,interface));

    if(0)
      {
	reginfo = reginfo;
	handler = handler;
      }

    switch(reqinfo->mode) {

        case MODE_GET:
            snmp_set_var_typed_value(requests->requestvb, ASN_OPAQUE_FLOAT,
                                     /* XXX: a pointer to the scalar's data */&amiFloat,
                                     /* XXX: the length of the data in bytes */sizeof(amiFloat));
            break;

        /*
         * SET REQUEST
         *
         * multiple states in the transaction.  See:
         * http://www.net-snmp.org/tutorial-5/toolkit/mib_module/set-actions.jpg
         */
        case MODE_SET_RESERVE1:
                /* or you could use netsnmp_check_vb_type_and_size instead */
	    ret = netsnmp_check_vb_type(requests->requestvb, ASN_OPAQUE_FLOAT);
            if ( ret != SNMP_ERR_NOERROR )
	      {
                netsnmp_set_request_error(reqinfo, requests, ret );
	      }
            break;

        case MODE_SET_RESERVE2:
            /* XXX malloc "undo" storage buffer */
            break;

        case MODE_SET_FREE:
            /* XXX: free resources allocated in RESERVE1 and/or
               RESERVE2.  Something failed somewhere, and the states
               below won't be called. */
            break;

        case MODE_SET_ACTION:
            /* XXX: perform the value change here */
            break;

        case MODE_SET_COMMIT:
            /* XXX: delete temporary storage */
            break;

        case MODE_SET_UNDO:
            /* XXX: UNDO and return to previous value for the object */
            break;

        default:
            /* we should never get here, so this is a really bad error */
            snmp_log(LOG_ERR, "unknown mode (%d) in handle_amiSnmpFloat\n", reqinfo->mode );
            return SNMP_ERR_GENERR;
    }

    return SNMP_ERR_NOERROR;
}

ObjUsr getMapperObject(std::string basePath,std::string interface)
{
    ObjUsr objects;

    std::ofstream fpchassis;
    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "get mapper object basePath" << basePath << std::endl;
    fpchassis.close();
    
    try
    {
      std::string sensorMgrObjBasePath = "/xyz/openbmc_project/sensors";
		
	auto bus = sdbusplus::bus::new_default();
		
        auto sensorMgmtService = getServiceName(basePath,interface);
        auto method = bus.new_method_call(
	  sensorMgmtService.c_str(), sensorMgrObjBasePath.c_str(),
            "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");

        auto reply = bus.call(method);
        reply.read(objects);
    }
    catch (const sdbusplus::exception_t& e)
    {
        //lg2::error("Failed to excute GetManagedObjects at {PATH}: {ERR}",
        //           "PATH", ldapMgrObjBasePath, "ERR", e);
        throw;
    }
    return objects;
}


std::string getServiceName(std::string path, std::string intf)
{


    // Object Mapper related
    static constexpr const char* objMapperService =
      "xyz.openbmc_project.ObjectMapper";
    static constexpr const char* objMapperPath =
      "/xyz/openbmc_project/object_mapper";
    static constexpr const char* objMapperInterface =
      "xyz.openbmc_project.ObjectMapper";
    

    std::ofstream fpchassis;
    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "get service name Path " << path << std::endl;
    fpchassis.close();
    
    //sdbusplus::bus_t bus{ipmid_get_sd_bus_connection()};
    auto bus = sdbusplus::bus::new_default();

    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "get service Create mapper call GetObject " << std::endl;
    fpchassis.close();
    
    auto mapperCall = bus.new_method_call(objMapperService, objMapperPath,
                                          objMapperInterface, "GetObject");


    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "get service Append mapper call with Path " << path << std::endl;
    fpchassis << "get service Append mapper call with iface " << intf << std::endl;
    fpchassis.close();
    
    mapperCall.append(path);
    mapperCall.append(std::vector<std::string>({intf}));


    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "get service bus call " << std::endl;
    fpchassis.close();
    
    auto mapperResponseMsg = bus.call(mapperCall);
    
    if (mapperResponseMsg.is_method_error())
    {
        fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	fpchassis << "get service error in mapper call " << std::endl;
	fpchassis.close();
        lg2::error("Error in mapper call");
	phosphor::logging::elog<sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure>();
    }
    

    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "get service read " << std::endl;
    fpchassis.close();

    std::map<std::string, std::vector<std::string>> mapperResponse;
    mapperResponseMsg.read(mapperResponse);
    
    
    if (mapperResponse.begin() == mapperResponse.end())
    {
        fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
	fpchassis << "get service invalid response from mapper " << std::endl;
	fpchassis.close();
        lg2::error("Invalid response from mapper");
	phosphor::logging::elog<sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure>();
    }


    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "get service return " << std::endl;
    fpchassis.close();
    
    return mapperResponse.begin()->first;
}

double getSensorInfo(std::string basePath, std::string interface)
{
    std::ofstream fpchassis;
    ObjUsr objects;
    double sensorInfo = 0;

    fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
    fpchassis << "handle SNMP Integer "  << std::endl;
    fpchassis.close();


    objects = getMapperObject(basePath,interface);

    //get the sensor Information
    try
      {
        for (const auto& [path, interfaces] : objects)
          {
            fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
            fpchassis << "find interfaces" << std::endl;
            fpchassis.close();
            //auto it = interfaces.find("xyz.openbmc_project.Sensor.Value");
	    if(path == basePath)
	      {
		auto it = interfaces.find(interface);
		if (it != interfaces.end())
		  {		
		    auto propIt = it->second.find("Value");
		    if (propIt != it->second.end() && std::get<double>(propIt->second))
		      {
			sensorInfo = std::get<double>(propIt->second);
			fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
			fpchassis << "path " << path.str << std::endl;
			fpchassis << "propIt second  " << std::get<double>(propIt->second) << std::endl;
			fpchassis.close();
			//break;
		      }// propIt second
		  }//interface
	      }//path 
	  }

      }
    catch (const std::bad_variant_access& e)
      {
        fpchassis.open("/tmp/chassis.tmp",std::ios_base::app);
        fpchassis << "failure" << std::endl;
        fpchassis.close();
      }
    return sensorInfo;
}
